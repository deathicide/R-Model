library("shiny", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("manipulate", lib.loc="/Applications/RStudio.app/Contents/Resources/R/library")
mainPanel()
mainPanel(
h3(textOutput("caption")),
plotOutput("megaPlot"))
# Define UI
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
# Define UI
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
(m1 <- Matrix(c(1,0,1,1), nc = 2))
(e1 <- expm(m1)) ; e <- exp(1)
stopifnot(all.equal(e1@x, c(e,0,e,e), tol = 1e-15))
(m2 <- Matrix(c(-49, -64, 24, 31), nc = 2))
(e2 <- expm(m2))
(m3 <- Matrix(cbind(0,rbind(6*diag(3),0))))# sparse!
(e3 <- expm(m3)) # upper triangular
library("Matrix", lib.loc="/opt/local/lib/R/library")
(m1 <- Matrix(c(1,0,1,1), nc = 2))
(e1 <- expm(m1)) ; e <- exp(1)
stopifnot(all.equal(e1@x, c(e,0,e,e), tol = 1e-15))
(m2 <- Matrix(c(-49, -64, 24, 31), nc = 2))
(e2 <- expm(m2))
(m3 <- Matrix(cbind(0,rbind(6*diag(3),0))))# sparse!
(e3 <- expm(m3)) # upper triangular
?Startup
R.home
rhome
RHOME
R
library("shiny", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
?startup
?Startup
options(device="x11")
x=rnorm(10)
y=rnorm(10)
plot(x,y)
plot(x,y,main="supertitle",xlab="test")
plot(x,y,b,main="supertitle",xlab="test")
plot(x,y,type=b,main="supertitle",xlab="test")
plot(x,y,type="b",main="supertitle",xlab="test")
install.packages("expm")
install.packages("matrixcalc")
install.packages("MatrixModels")
install.packages("matrixStats")
install.packages("protr")
install.packages("rgl")
install.packages("scatterplot3d")
install.packages("VecStatGraphs3D")
install.packages("VecStatGraphs2D")
install.packages("VecStatGraphs3D")
?install
?install.packages
install.packages("TIMP")
install.packages("calibFit")
install.packages("rgl")
install.packages("FlexParamCurve")
install.packages("glm2")
install.packages("gmodels")
install.packages("hdlm")
getwd()
})
} )
out1<-matrix(NA,nrow=1000,ncol=5)
system.time(
for(i in 1:1000){
out1[i,]<-runif(5)
} )
View(out1)
summary
summary.matrix
plot(out1)
plot(out1[,1],out1[,5])
?runif
View(out1)
system.time(
for(i in 1:1000){
out1[i,]<-runif(5)
} )
} )
system.time(
for(i in 1:1000){
out1[i,]<-runif(5)
} )
install.packages("scatterplot3d")
install.packages("scatterplot2d")
install.packages("knitR")
install.packages("knitr")
library("knitr", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("shiny", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("scatterplot3d", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
install.packages("rgl")
install.packages("rgl")
library(rgl)
library("rgl")
?install.packages
?library
library(rgl,verbose=true)
library(rgl,verbose=TRUE)
install.packages("rgl")
install.packages("Rglpk")
install.packages("rgl")
?rgl
??rgl
install.packages("rgl")
system.file("libs",.Platform$r_arch,"aglrgl.so",package="rgl")
demo(rgl)
install.packages("rgl")
install.packages("agl")
install.packages("rgl")
demo(rgl)
install.packages("rgl")
library("rgl", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
demo(rgl)
demo(abundance)
library("matrixcalc", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("MatrixModels", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("matrixStats", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("knitr", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
library("shiny", lib.loc="/Users/deathicide/R/x86_64-apple-darwin11.4.2-library/2.15")
demo(abundance)
library(shiny)
runExample("01_hello")
source('~/Documents/School Work/Test R/shiny tutorial/server.R')
library(shiny)
# Define server logic required to generate and plot a random distribution
shinyServer(function(input, output) {
# Function that generates a plot of the distribution. The function
# is wrapped in a call to reactivePlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- reactivePlot(function() {
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
library(shiny)
# Define server logic required to generate and plot a random distribution
shinyServer(function(input, output) {
# Function that generates a plot of the distribution. The function
# is wrapped in a call to reactivePlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- reactivePlot(function() {
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
library(shiny)
runExample("02_text")
wd
getwd()
setwd("../")
getwd()
runApp("webProteinModel/")
library(shiny)
runExample("02_text")
runApp("webProteinModel/")
library(shiny)
runExample("04_mpg")
?selectInput
runApp("webProteinModel/")
runApp("webProteinModel/")
runApp("webProteinModel/")
runApp("webProteinModel/")
runApp("webProteinModel/")
runApp("webProteinModel/")
X <- matrix(scan(stdin()), ncol=3, byrow=TRUE)
require(rgl)
N <- nrow(X)
meanX <- apply(X, 2, mean)
Xpca   <- princomp(X)
dirVector <- Xpca$loadings[, 1]
Xfit1 <- matrix(rep(meanX, each=N), ncol=3) +
Xpca$score[, 1] %*% t(dirVector)
t <- c(min(Xpca$score[, 1])-.2, max(Xpca$score[, 1])+.2)
endpts <- rbind(meanX + t[1]*dirVector, meanX + t[2]*dirVector)
#library(scaterplot3d)
#s3d <- scatterplot3d(X[, 1], X[, 2], X[, 3], color="blue")
#s3d$points3d(endpts[, 1], endpts[, 2], endpts[, 3], type="l",
#             col="red", lwd=2)
plot3d(X[, 1], X[, 2], X[, 3], col="blue",xlim = c(-35,35),ylim= c(-35,35),zlim= c(-35,35))
plot3d(endpts[, 1], endpts[, 2], endpts[, 3], type="l",col="red", lwd=2,add=T)
